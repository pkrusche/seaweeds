
////////////////////////////////////////////
// Generated by BRCC 1.4
// BRCC Compiled on: Mar  2 2009 13:08:08
////////////////////////////////////////////

#include "brook/brook.h"
#include "seaweeds_gpu_gpu.h"
#include "seaweeds_gpu.h"

#line 3 "src/gpulib/seaweeds_gpu.br"
void  __compnet_stage_2d_cpu_inner(const __BrtArray<__BrtChar1  > &x,
                                  const __BrtArray<__BrtChar1  > &y,
                                  const __BrtInt1  &offset,
                                  const __BrtInt1  &len,
                                  const __BrtInt1  &x_start,
                                  const __BrtInt1  &y_end,
                                  const __BrtArray<__BrtInt1  > &p,
                                  __BrtInt1  &o)

#line 5 "src/gpulib/seaweeds_gpu.br"
{

#line 6 "src/gpulib/seaweeds_gpu.br"
  __BrtInt1  idx = (indexof(o)).swizzle1(::brt::maskY);

#line 7 "src/gpulib/seaweeds_gpu.br"
  __BrtInt1  idy = (indexof(o)).swizzle1(::brt::maskX);


#line 9 "src/gpulib/seaweeds_gpu.br"
  if (idx >= offset && idx < offset + len)

#line 9 "src/gpulib/seaweeds_gpu.br"
  {

#line 10 "src/gpulib/seaweeds_gpu.br"
    __BrtInt1  idxd2 = (len - idx + offset - __BrtInt1((int)1)) >> __BrtInt1((int)1);

#line 11 "src/gpulib/seaweeds_gpu.br"
    __BrtInt1  c_x = (__BrtInt1 ) (x[__BrtInt4( (int)(int)(x_start + idxd2), (int)(int)(idy), 0, 0).swizzle2(::brt::maskX, ::brt::maskY)]);

#line 12 "src/gpulib/seaweeds_gpu.br"
    __BrtInt1  c_y = (__BrtInt1 ) (y[y_end - idxd2]);

#line 14 "src/gpulib/seaweeds_gpu.br"
    __BrtInt1  match = (c_x == c_y).questioncolon(__BrtInt1((int)1),__BrtInt1((int)0));

#line 15 "src/gpulib/seaweeds_gpu.br"
    __BrtInt1  minmax = ((idx - offset & __BrtInt1((int)1)) == __BrtInt1((int)0)).questioncolon(__BrtInt1((int)1),__BrtInt1((int)0));


#line 18 "src/gpulib/seaweeds_gpu.br"
    if (match == __BrtInt1((int)0))

#line 18 "src/gpulib/seaweeds_gpu.br"
    {

#line 19 "src/gpulib/seaweeds_gpu.br"
      __BrtInt1  idx_min = (idx - offset & ~__BrtInt1((int)1)) + offset;

#line 20 "src/gpulib/seaweeds_gpu.br"
      __BrtInt1  idx_max = idx_min + __BrtInt1((int)1);

#line 21 "src/gpulib/seaweeds_gpu.br"
      __BrtInt1  val_l = p[__BrtInt4( (int)(int)(idy), (int)(int)(idx_min), 0, 0).swizzle2(::brt::maskX, ::brt::maskY)];

#line 22 "src/gpulib/seaweeds_gpu.br"
      __BrtInt1  val_t = p[__BrtInt4( (int)(int)(idy), (int)(int)(idx_max), 0, 0).swizzle2(::brt::maskX, ::brt::maskY)];


#line 23 "src/gpulib/seaweeds_gpu.br"
      if (minmax == __BrtInt1((int)0))

#line 23 "src/gpulib/seaweeds_gpu.br"
      {

#line 24 "src/gpulib/seaweeds_gpu.br"
        o = __min_cpu_inner(val_l, val_t);
      }

      else

#line 25 "src/gpulib/seaweeds_gpu.br"
      {

#line 26 "src/gpulib/seaweeds_gpu.br"
        o = __max_cpu_inner(val_l, val_t);
      }

    }

    else

#line 28 "src/gpulib/seaweeds_gpu.br"
    {

#line 29 "src/gpulib/seaweeds_gpu.br"
      o = p[__BrtInt4( (int)(int)(idy), (int)(int)(idx), 0, 0).swizzle2(::brt::maskX, ::brt::maskY)];
    }

  }

  else

#line 31 "src/gpulib/seaweeds_gpu.br"
  {

#line 32 "src/gpulib/seaweeds_gpu.br"
    o = p[__BrtInt4( (int)(int)(idy), (int)(int)(idx), 0, 0).swizzle2(::brt::maskX, ::brt::maskY)];
  }

}
void  __compnet_stage_2d_cpu(::brt::KernelC *__k, int __brt_idxstart, int __brt_idxend, bool __brt_isreduce)

#line 3 "src/gpulib/seaweeds_gpu.br"
{

#line 3 "src/gpulib/seaweeds_gpu.br"
  __BrtArray<__BrtChar1  > *arg_x = (__BrtArray<__BrtChar1  > *) __k->getVectorElement(0);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __BrtArray<__BrtChar1  > *arg_y = (__BrtArray<__BrtChar1  > *) __k->getVectorElement(1);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __BrtInt1 *arg_offset = (__BrtInt1 *) __k->getVectorElement(2);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __BrtInt1 *arg_len = (__BrtInt1 *) __k->getVectorElement(3);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __BrtInt1 *arg_x_start = (__BrtInt1 *) __k->getVectorElement(4);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __BrtInt1 *arg_y_end = (__BrtInt1 *) __k->getVectorElement(5);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __BrtArray<__BrtInt1  > *arg_p = (__BrtArray<__BrtInt1  > *) __k->getVectorElement(6);

#line 3 "src/gpulib/seaweeds_gpu.br"
  ::brt::StreamInterface *arg_o = (::brt::StreamInterface *) __k->getVectorElement(7);

#line 3 "src/gpulib/seaweeds_gpu.br"
  

#line 3 "src/gpulib/seaweeds_gpu.br"
    for(int __brt_idx=__brt_idxstart; __brt_idx<__brt_idxend; __brt_idx++) {
  if(!(__k->isValidAddress(__brt_idx))){ continue; }

#line 3 "src/gpulib/seaweeds_gpu.br"
    Addressable <__BrtInt1  > __out_arg_o((__BrtInt1 *) __k->FetchElem(arg_o, __brt_idx));

#line 3 "src/gpulib/seaweeds_gpu.br"
    __compnet_stage_2d_cpu_inner (

#line 3 "src/gpulib/seaweeds_gpu.br"
                                  *arg_x,

#line 3 "src/gpulib/seaweeds_gpu.br"
                                  *arg_y,

#line 3 "src/gpulib/seaweeds_gpu.br"
                                  *arg_offset,

#line 3 "src/gpulib/seaweeds_gpu.br"
                                  *arg_len,

#line 3 "src/gpulib/seaweeds_gpu.br"
                                  *arg_x_start,

#line 3 "src/gpulib/seaweeds_gpu.br"
                                  *arg_y_end,

#line 3 "src/gpulib/seaweeds_gpu.br"
                                  *arg_p,

#line 3 "src/gpulib/seaweeds_gpu.br"
                                  __out_arg_o);

#line 3 "src/gpulib/seaweeds_gpu.br"
    *reinterpret_cast<__BrtInt1 *>(__out_arg_o.address) = __out_arg_o.castToArg(*reinterpret_cast<__BrtInt1 *>(__out_arg_o.address));
  }
}

#line 3 "src/gpulib/seaweeds_gpu.br"
void __compnet_stage_2d::operator()(const ::brook::Stream< char >& x,

#line 3 "src/gpulib/seaweeds_gpu.br"
		const ::brook::Stream< char >& y,

#line 3 "src/gpulib/seaweeds_gpu.br"
		const int  offset,

#line 3 "src/gpulib/seaweeds_gpu.br"
		const int  len,

#line 3 "src/gpulib/seaweeds_gpu.br"
		const int  x_start,

#line 3 "src/gpulib/seaweeds_gpu.br"
		const int  y_end,

#line 3 "src/gpulib/seaweeds_gpu.br"
		const ::brook::Stream< int >& p,

#line 3 "src/gpulib/seaweeds_gpu.br"
		const ::brook::Stream<  int >& o)
{

#line 3 "src/gpulib/seaweeds_gpu.br"
  static const void *__compnet_stage_2d_fp[] = {

#line 3 "src/gpulib/seaweeds_gpu.br"

#line 3 "src/gpulib/seaweeds_gpu.br"
     "cal", __compnet_stage_2d_cal,

#line 3 "src/gpulib/seaweeds_gpu.br"
     "cpu", (void *) __compnet_stage_2d_cpu,

#line 3 "src/gpulib/seaweeds_gpu.br"
     NULL, NULL };


#line 3 "src/gpulib/seaweeds_gpu.br"
  ::brook::Kernel  __k(__compnet_stage_2d_fp, brook::KERNEL_MAP);
  ::brook::ArgumentInfo __argumentInfo;


#line 3 "src/gpulib/seaweeds_gpu.br"
  __k.PushGatherStream(x);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __k.PushGatherStream(y);

#line 3 "src/gpulib/seaweeds_gpu.br"
  brook::Constant<int > constant_2(offset);
  __k.PushConstant(constant_2);

#line 3 "src/gpulib/seaweeds_gpu.br"
  brook::Constant<int > constant_3(len);
  __k.PushConstant(constant_3);

#line 3 "src/gpulib/seaweeds_gpu.br"
  brook::Constant<int > constant_4(x_start);
  __k.PushConstant(constant_4);

#line 3 "src/gpulib/seaweeds_gpu.br"
  brook::Constant<int > constant_5(y_end);
  __k.PushConstant(constant_5);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __k.PushGatherStream(p);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __k.PushOutput(o);

#line 3 "src/gpulib/seaweeds_gpu.br"
  __argumentInfo.startExecDomain = _domainOffset;
  __argumentInfo.domainDimension = _domainSize;


  __k.run(&__argumentInfo);
  DESTROYPARAM();

}

__THREAD__ __compnet_stage_2d compnet_stage_2d;


